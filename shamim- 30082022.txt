date : 30/08/2022

# Table Name 


package in.shamimit.entity;

@Data
@Entity
@Table( name = "Eligibilty_Dtls")
public class EligibilityDtls {

	@Id
	private intger eligibiltyId;
	private String  name;
	private Long mobileNumber;
	private String email;
	private Char gender;
	private intger ssn;
	private String planName;
	private String planStatus;
	private LocalDate planStartDate;
	private LocalDate planEndDate;
	private LocalDate createDate;
	private LocalDate updateDate;
	private String createdBy;
	private String updatedBy;

}

# SearchRequest Class

package in.shamimit.request;

@Data
public class SearchRequest{

	private String planName;
	private String planStatus;
	private LocalDate planStartDate;
	private LocalDate planEndDate;

}

# SearchResponse Class

package in.shamim.response;

@Data
public class SearchResponse {

	private String  name;
	private Long mobileNumber;
	private String email;
	private Char gender;
	private intger ssn;
	private String planName;
	private String planStatus;

}



# Repository Class


public interface EligibilityDetailsRepo extends JpaRepository<EligibilityDtls , Integer>{ }

# Service Class

pubic interface EligibilityService {

	public List<String> getUniquePlanNames();
	public List<String> getUniquePlanStatuses();
	public List<SearchResponse> search(SearchRequest request);
	public void generateExcel(HttpServletResponse response);
	public void generatePdf(HttpServletResponse response);

}
 


# POM.xml

	<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
	<dependency>
 	   <groupId>org.apache.poi</groupId>
   	   <artifactId>poi-ooxml</artifactId>
           <version>4.1.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.github.librepdf/openpdf -->
	<dependency>
	    <groupId>com.github.librepdf</groupId>
      	    <artifactId>openpdf</artifactId>
 	    <version>1.3.8</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
	<dependency>
	    <groupId>io.springfox</groupId>
  	    <artifactId>springfox-swagger2</artifactId>
  	   <version>2.8.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
	<dependency>
	    <groupId>io.springfox</groupId>
  	    <artifactId>springfox-swagger-ui</artifactId>
   	    <version>2.8.0</version>
	</dependency>

#application.yml 
	  
 	spring : 
	   datasource :
 	 	driverClassName : com.mysql.jdbc.Driver
		url : jdbc:mysql://localhost:3306/sbms
		username :
		password :
	   jpa : 
		hibernate.ddl-auto : update
		generate-ddl : true
		show-sql : true 

# why java is plateform independent ?
 => we can run java bytecodes in any system and any operating system.

# why java is not 100% object oriented ?
=> java used primitive data types integer, string , char , double, boolean , float  , double , long , short . which are not objects .

# what are wrapper classes in java . 
=> wrapper class convert java primitive into reference types (objects) .
= > wrapper class conert java primitive into reference types ( objects).
 

# what is data binding in java
=> connecting to method call to the method body is called is call data binding .
		Connecting to method call to the method body is known as data binding.
 Data Binding are two types .
 1) Static Binding   2) Dynamic Binding 
Staic Binding : 
	=> When type of object is determined at the complied time is called static binding .
	=> Static is known for early binding.
Dynamic Binding : 
	=>When type of object is determined at the run-time is called dynamic binding .
	=> Dynamic is late binding .


































